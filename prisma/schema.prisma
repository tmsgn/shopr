generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id        String     @id @default(uuid())
  name      String
  userId    String

  billboards Billboard[] @relation("StoreToBillboard")
  catagories Catagory[]  @relation("StoreToCatagory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("OrderToStore")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  products   Product[]   @relation("ProductToStore")
}

model Billboard {
  id         String     @id @default(uuid())
  lable      String
  storeId    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  imageUrl   String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  catagories Catagory[] @relation
}

model Catagory {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCatagory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("ProductToCatagory")
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductToSize")
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductToColor")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Decimal
  storeId     String
  store       Store    @relation("ProductToStore", fields: [storeId], references: [id])
  catagoryId  String
  catagory    Catagory @relation("ProductToCatagory", fields: [catagoryId], references: [id])
  sizeId      String?
  size        Size?    @relation("ProductToSize", fields: [sizeId], references: [id])
  colorId     String?
  color       Color?   @relation("ProductToColor", fields: [colorId], references: [id])
  images      Image[]  @relation("ImageToProduct")
  orderItems  OrderItem[]
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product? @relation("ImageToProduct", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("OrderToStore",fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
}
